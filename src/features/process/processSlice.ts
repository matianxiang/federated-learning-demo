import { createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';


export interface State {
    status: 'initial' | 'loading' | 'training' | 'finish';

}

const initialState: State = {
    status: 'initial',

};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const processSlice = createSlice({
    name: 'process',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        update: (state) => {
            switch (state.status) {
                case 'initial':
                    state.status = 'loading'
                    break
                case 'loading':
                    state.status = 'training'
                    break
                case 'training':
                    state.status = 'finish'
                    break
                case 'finish':
                    state.status = 'initial'
                    break
            }
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
});

export const { update } = processSlice.actions;

/**在app/store.ts配置*/
export const queryStatus = (state: RootState) => state.process.status;


export default processSlice.reducer;
